#!/bin/bash

COMMIT_MSG_FILE=$1

# Read the existing commit message
USER_COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Getting list of files in index
FILES_CHANGED=$(git diff --cached --name-status)

# Flags for tags
CPLUSPLUS_NEW=false
CPLUSPLUS_MODIFIED=false
EPD_UPDATED=false

# Checking that used could already add tag for a specific thing
if echo "$USER_COMMIT_MSG" | grep -qi "\[C++ \*Regenerate\]"; then
  CPLUSPLUS_NEW=true
fi
if echo "$USER_COMMIT_MSG" | grep -qi "\[C++\]"; then
  CPLUSPLUS_MODIFIED=true
fi

# Breaking down changes
while IFS= read -r line; do
  STATUS=$(echo "$line" | awk '{print $1}')
  FILE_PATH=$(echo "$line" | awk '{print $2}')

  # For .h and .cpp files it's either new added of modified
  if [[ "$FILE_PATH" == *.h || "$FILE_PATH" == *.cpp ]]; then
    if [[ "$STATUS" == "A" ]]; then
      CPLUSPLUS_NEW=true
    fi
    if [[ "$STATUS" == "M" ]]; then
      CPLUSPLUS_MODIFIED=true
    fi
  fi

  #For .cs C# files always must regenerate project as it config change
  if [[ "$FILE_PATH" == *.cs ]]; then
    CPLUSPLUS_NEW=true
  fi

  # For hash update as External Plugin Directory
  if [[ "$FILE_PATH" == *"commit_hash.txt" ]]; then
    EPD_UPDATED=true
  fi
done <<<"$FILES_CHANGED"

# Making prefixes
PREFIX=""

if $CPLUSPLUS_NEW; then
  PREFIX+="[C++ *Regenerate] "
elif $CPLUSPLUS_MODIFIED; then
  PREFIX+="[C++] "
fi

if $EPD_UPDATED; then
  PREFIX+="[EPD] "
fi

# Deleting old prefix if it exists
sed -i 's/\[[^]]*\]*//g' "$COMMIT_MSG_FILE"
# Trim leading and trailing spaces
sed -i 's/^ *//; s/ *$//' "$COMMIT_MSG_FILE"

# Add prefix to a message if needed
if [[ -n "$PREFIX" ]]; then
  sed -i "1s/^/$PREFIX/" "$COMMIT_MSG_FILE"
fi
